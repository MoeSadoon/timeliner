#!/usr/bin/env node
'use strict';

const args = require('minimist')(process.argv.slice(2));
const timeliner = require('../');
const Promise = require('bluebird');

args.url = args.url || args._;
args.reporter = args.reporter || args.r;
args.count = args.count || args.c;

let reporter = args.reporter || 'table';

if (typeof reporter === 'string') {
  reporter = reporter.split(',');
}

if (args.help || !args.url) {
  require('./usage');
  process.exit();
}

function log (data) {
  if (typeof data.forEach === 'function') {
    data.forEach(log);
  } else {
    console.log(data);
  }
}

timeliner(args)
  .then((data) => {
    return Promise.map(reporter, (r) => {
      if (!timeliner.reporters[r] && !r.match(/^chart\|.+/)) {
        return `Unrecognised reporter type: "${r}"`;
      }
      if (r === 'table') {
        return Promise.resolve(data)
          .then(timeliner.reporters.basic)
          .then(timeliner.reporters.table);
      } else if (r.match(/^chart\|.+/)) {
        const metric = r.split('|')[1];
        const options = args.url.map(u => ({ caption: `${u} - ${metric}` }));
        return Promise.resolve(data)
          .then(timeliner.reporters.basic)
          .then((d) => timeliner.reporters.chart(d.map(set => set[metric].raw), options));
      } else {
        return Promise.resolve(data)
          .then(timeliner.reporters[r]);
      }
    });
  })
  .then(log);
